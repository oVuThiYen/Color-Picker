{"version":3,"sources":["components/ColorPicker.js","components/SizeSetting.js","components/Result.js","components/Reset.js","App.js","Form.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","Manage.js","reducers/todos.js","reducers/index.js","serviceWorker.js","index.js"],"names":["ColorPicker","props","setActiveColor","color","onColor","state","colors","backgroundColor","elmColor","this","map","index","key","style","showColor","className","onClick","Component","SizeSetting","value","onChangeSize","size","changeSize","Result","borderColor","fontSize","setStyle","Reset","onReset","onDefault","App","onSetColor","params","setState","console","log","to","Form","onHandleChange","e","target","name","type","checked","onHandleSubmit","preventDefault","txtName","txtPassword","textDes","sltGender","rdLang","status","onSubmit","onChange","TaskForm","onCloseForm","onClear","Search","placeholder","Sort","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","TaskItem","onUpdateStatus","task","TaskList","elmTasks","tasks","scope","Manage","onToggleForm","isDisplayForm","data","generateId","push","localStorage","setItem","JSON","stringify","findIndex","result","forEach","getItem","parse","Math","floor","random","toString","substring","s4","elmTaskForm","todos","action","text","completed","todo","combineReducers","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f1329ce.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: ['red', 'blue', 'green', '#ccc']\n    }\n  }\n\n  showColor(color) {\n    return {\n      backgroundColor: color\n    }\n  }\n  setActiveColor = (color) => {\n    this.props.onColor(color)\n  }\n\n  render() {\n    var elmColor = this.state.colors.map((color, index) => {\n      return <span\n              key={ index }\n              style={this.showColor(color)}\n              className={this.props.color === color? 'active' : '' }\n              onClick={() => this.setActiveColor(color)}>\n            </span>\n    })\n    return (\n      <div className=\"col-6\">\n        <div className=\"card\">\n          <div className=\"card-header bg-primary\">\n            <h3 className=\"card-title\">Color Picker</h3>\n          </div>\n          <div className=\"card-body\">\n            { elmColor }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ColorPicker\n","import React, { Component } from 'react'\n\nclass SizeSetting extends Component {\n  changeSize(value) {\n    this.props.onChangeSize(value)\n  }\n\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header bg-warning\">\n          <h3 className=\"card-title\">Size: {this.props.size}</h3>\n        </div>\n        <div className=\"card-body\">\n          <button className=\"btn btn-success mr-2\" onClick={() => this.changeSize(+2)}>Tăng</button>\n          <button className=\"btn btn-success\" onClick={() => this.changeSize(-2)}>Giảm</button>\n        </div>\n      </div>  \n    )\n  }\n}\n\nexport default SizeSetting\n","\nimport React, { Component } from 'react'\n\nclass Result extends Component {\n  setStyle() {\n    return {\n      color: this.props.color,\n      borderColor: this.props.color,\n      fontSize: this.props.size\n    }\n  }\n  render() {\n    return (\n      <div className=\"col-12\">\n        <p>color: {this.props.color} - fontsize: {this.props.size}</p>\n        <div className=\"content\" style={this.setStyle()}>\n          Nội dung setting\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Result\n","import React, { Component } from 'react'\n\nclass Reset extends Component {\n  onReset = () => {\n    this.props.onDefault(true)\n  }\n  render() {\n    return (\n      <button className=\"btn btn-primary\" onClick={this.onReset}>reset</button>\n    )\n  }\n}\n\nexport default Reset\n","import React, { Component } from 'react'\nimport './App.css'\nimport ColorPicker from './components/ColorPicker'\nimport SizeSetting from './components/SizeSetting'\nimport Result from './components/Result'\nimport Reset from './components/Reset'\nimport { Link } from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: 'red',\n      fontSize: 12\n    }\n  }\n\n  onSetColor = (params) => {\n    this.setState ({\n      color: params\n    })\n    console.log(params)\n  }\n\n  onChangeSize = (value) => {\n    this.setState({\n      fontSize: (this.state.fontSize + value  >=8 && this.state.fontSize + value <=36) ? this.state.fontSize + value : this.state.fontSize\n    })\n    console.log(value)\n  }\n\n  onDefault = (value) => {\n    if(value) {\n      this.setState({\n        color: 'red',\n        fontSize: 12\n      })\n    } \n    console.log(value)\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container mt-5\">\n          <div className=\"row\">\n            <ColorPicker color={this.state.color} onColor={ this.onSetColor } />\n            <div className=\"col-6\">\n              <SizeSetting size={this.state.fontSize} onChangeSize={this.onChangeSize}/>\n              <Reset onDefault={this.onDefault}/>\n            </div>\n            <Result color={this.state.color} size={this.state.fontSize} />\n            <div className=\"col-12\">\n              <h2 className=\"mt-5\">Link Pages</h2>\n              <ul>\n                <li>\n                  <Link to=\"/form\">Form</Link>\n                </li>\n                <li>\n                  <Link to=\"/manage\">Manage</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\nimport './App.css'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      txtName: '',\n      txtPassword: '',\n      textDes: '',\n      sltGender: 0,\n      rdLang: 'vi',\n      status: true\n    }\n  }\n\n  onHandleChange = (e) => {\n    var target = e.target;\n    var name = target.name;\n    var value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name] : value\n    })\n  }\n\n  onHandleSubmit = (e) => {\n    e.preventDefault()\n    console.log(this.state)\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"col-8\">\n          <div className=\"card\">\n            <div className=\"card-header bg-primary\">\n              <h3 className=\"card-title\">Form</h3>\n            </div>\n            <div className=\"card-body\">\n            <form onSubmit={this.onHandleSubmit}>\n              <div className=\"form-group\">\n                <label>username</label>\n                <input type=\"text\" className=\"form-control\" onChange={this.onHandleChange} name=\"txtName\" value={this.state.txtName} />\n              </div>\n              <div className=\"form-group\">\n                <label>password</label>\n                <input type=\"text\" className=\"form-control\" onChange={this.onHandleChange} name=\"txtPassword\" value={this.state.txtPassword} />\n              </div>\n              <div className=\"form-group\">\n                <label>Example textarea</label>\n                <textarea className=\"form-control\" name=\"textDes\" onChange={this.onHandleChange} value={this.state.textDes} />\n              </div>\n              <div className=\"form-group\">\n                <label>Example multiple select</label>\n                <select\n                  className=\"form-control\"\n                  name=\"sltGender\"\n                  value={this.state.sltGender}\n                  onChange={this.onHandleChange}\n                >\n                  <option value={0}>Nữ</option>\n                  <option value={1}>Nam</option>\n                </select>\n              </div>\n              <p>Language</p>\n              <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"rdLang\" value=\"vi\" onChange={ this.onHandleChange } checked={ this.state.rdLang === \"vi\" } />\n                <label className=\"form-check-label\">\n                  viet nam\n                </label>\n              </div>\n              <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"radio\" name=\"rdLang\" value=\"en\" onChange={this.onHandleChange} checked={ this.state.rdLang === \"en\" } />\n                <label className=\"form-check-label\">\n                  english\n                </label>\n              </div>\n              <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"checkbox\" name=\"status\" value={true} onChange={this.onHandleChange} checked={this.state.status === true} />\n                <label className=\"form-check-label\">\n                  Status\n                </label>\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Form\n","import React, { Component } from 'react'\n\nclass TaskForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      status: false\n    }\n  }\n  onCloseForm = () => {\n    this.props.onCloseForm()\n  }\n\n  onChange = (e) => {\n    var target= e.target\n    var name = target.name\n    var value = target.value\n    if(name === 'status') {\n      value = target.value === 'true' ? true : false\n    }\n    this.setState({\n      [name]: value\n    })\n  }\n\n  onHandleSubmit = (e) => {\n    e.preventDefault()\n    this.props.onSubmit(this.state)\n    this.onClear();\n    this.onCloseForm();\n  }\n\n  onClear = () => {\n    this.setState({\n      name: '',\n      status: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header bg-primary\">\n          <h3 className=\"card-title text-white\">Add Workflow</h3>\n          <span className=\"text-right text--danger\" onClick={this.onCloseForm}>close</span>\n        </div>\n        <div className=\"card-body\">\n        <form onSubmit={this.onHandleSubmit}>\n          <div className=\"form-group\">\n            <label>Name</label>\n            <input type=\"text\" className=\"form-control\" name=\"name\" value={this.state.name} onChange={this.onChange} />\n          </div>\n          <div className=\"form-group\">\n            <label>Status</label>\n            <select\n              className=\"form-control\"\n              name=\"status\"\n              value={this.state.status} onChange={this.onChange}\n            >\n              <option value={true}>Active</option>\n              <option value={false}>Hide</option>\n            </select>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary mr-2\">Save</button>\n          <button type=\"button\" className=\"btn btn-danger\" onClick={this.onClear}>Cancel</button>\n        </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TaskForm\n","import React, { Component } from 'react'\n\nclass Search extends Component {\n  render() {\n    return (\n      <div className=\"col-6\">\n        <div className=\"input-group mb-3\">\n          <input type=\"text\" className=\"form-control\" placeholder=\"Search\" />\n          <div className=\"input-group-btn\">\n            <button type=\"button\" className=\"btn btn-primary\">Search</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Search\n","import React, { Component } from 'react'\n\nclass Sort extends Component {\n  render() {\n    return (\n      <div className=\"col-6\">\n        <div className=\"dropdown\">\n          <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Sort by\n          </button>\n          <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n            <a className=\"dropdown-item\" role=\"button\">Name A-Z</a>\n            <a className=\"dropdown-item\" role=\"button\">Name Z-A</a>\n            <a className=\"dropdown-item\" role=\"button\">Something else here</a>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sort\n","import React, { Component } from 'react'\n\nimport Search from './Search'\nimport Sort from './Sort'\n\nclass Control extends Component {\n  render() {\n    return (\n      <div className=\"row mt-3\">\n        <Search />\n        <Sort />\n      </div>\n    )\n  }\n}\n\nexport default Control\n","import React, { Component } from 'react'\n\nclass TaskItem extends Component {\n\n  onUpdateStatus = () =>{\n    this.props.onUpdateStatus(this.props.task.id)\n  }\n\n  render() {\n    var {task} = this.props\n    var {index} = this.props\n    return (\n      <tr>\n        <td>{index + 1}</td>\n        <td>\n          {task.name}\n        </td>\n        <td>\n          <span\n            className={ task.status === true ? 'label label-danger' : 'label label-success' }\n            onClick={this.onUpdateStatus}\n          >\n            { task.status === true ? 'Hide' :'Active' }</span>\n        </td>\n        <td>\n          <button type=\"button\" className=\"btn btn-primary mr-2\">Edit</button>\n          <button type=\"button\" className=\"btn btn-danger\">Delete</button>\n        </td>\n      </tr>\n    )\n  }\n}\n\nexport default TaskItem\n","import React, { Component } from 'react'\nimport TaskItem from './TaskItem'\n\nclass TaskList extends Component {\n  render() {\n    var { tasks } = this.props\n    var elmTasks = tasks.map((task, index) => {\n      return <TaskItem\n          key={index}\n          index={index}\n          task={task}\n          onUpdateStatus={this.props.onUpdateStatus}\n        />\n    })\n    return (\n      <table className=\"table table-dark\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Id</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Status</th>\n            <th scope=\"col\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td></td>\n            <td>\n              <input type=\"text\" className=\"form-control\" name=\"\"/>\n            </td>\n            <td>\n              <select\n                className=\"form-control\"\n                name=\"filterStatus\"\n              >\n                <option value={-1}>All</option>\n                <option value={0}>Activet</option>\n                <option value={1}>Hide</option>\n              </select>\n            </td>\n            <td>\n            </td>\n          </tr>\n          { elmTasks }\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default TaskList\n","import React, { Component } from 'react'\nimport './App.css'\nimport TaskForm from './components/TaskForm'\nimport Control from './components/Control'\nimport TaskList from './components/TaskList'\n\nclass Manage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      isDisplayForm: false\n    }\n  }\n\n  componentWillMount(){\n    if(localStorage && localStorage.getItem('tasks')){\n      var tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      })\n    }\n  }\n\n  s4(){\n    return Math.floor((1+Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  generateId() {\n    return this.s4() + this.s4() + '-' + this.s4();\n  }\n\n  onToggleForm = () => {\n    this.setState({\n      isDisplayForm: !this.state.isDisplayForm\n    })\n  }\n\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false\n    })\n  }\n\n  onSubmit = (data) => {\n    var {tasks} = this.state\n    data.id = this.generateId();\n    tasks.push(data)\n    this.setState({\n      tasks: tasks\n    })\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  onUpdateStatus = (id) => {\n    console.log(id)\n    var { tasks } = this.state;\n    var index = this.findIndex(id)\n    console.log(index)\n    console.log(tasks[index])\n    if(index !== -1) {\n      tasks[index].status = !tasks[index].status\n      \n      this.setState({\n        tasks: tasks\n      })\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }\n  }\n\n  findIndex = (id) => {\n    var { tasks } = this.state;\n    var result = -1\n    tasks.forEach((task, index) => {\n      if(task.id === id) {\n        result = index\n      }\n    })\n    return result\n  }\n\n  render() {\n    var { tasks, isDisplayForm } = this.state\n    var elmTaskForm = isDisplayForm ? \n      <TaskForm\n        onCloseForm={this.onCloseForm}\n        onSubmit={this.onSubmit}\n      /> : ''\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"text-center\">\n          <h1>Workflow Management</h1>\n        </div>\n        <div className=\"row mt-5\">\n          <div className={ isDisplayForm ? 'col-4' : '' }>\n            { elmTaskForm }\n          </div>\n          <div className={ isDisplayForm ? 'col-8' : 'col-12' }>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggleForm}>Add</button>\n            <Control />\n            <div className=\"row mt-3\">\n              <div className=\"col-12\">\n                <TaskList tasks={tasks} onUpdateStatus={this.onUpdateStatus} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Manage\n","const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          : todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos\n","import { combineReducers } from 'redux'\nimport todos from './todos'\n\nexport default combineReducers({\n  todos\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport Form from './Form';\nimport Manage from './Manage';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <div>\n          <Switch>\n            <Route exact path=\"/form\" component={Form} />\n            <Route exact path=\"/manage\" component={Manage} />\n            <Route exact path=\"/\" component={App} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}